Tree
    비 선형 자료구조 
    1:1이 아니다

    sub Tree    
        트리의 부분 트리 (부분 집합 느낌?)
    
    루트
        트리의 가장 윗 부분에 해당하는 노드
    
    리프
        트리의 가장 아랫부분에 위치하는 노드

    안쪽 노드
        자식이 있는 노드
    
    차수
        자식의 수 (n 차수)

    n진 트리
        트리의 자식이 가장 많은 차수를 가져와 부른다 --> 3개의 자식 -> 3진 트리

    너비 우선 탐색
        옆으로 탐색

    깊이 우선 탐색 (depth-first search)
        아래로 탐색
        1. 전위 순회
            리프까지 내려가며 탐색하는 방식
            자기 자신의 노드 방문을 먼저
                노드 방문 -> 왼쪽 자식 -> 오른쪽 자식
                    노드 프린트 후 왼쪽, 오른쪽 가서 출력
                    왼쪽에 갔을 때 왼쪽이 있으면 또 다시 방문
        2. 주위 순회 (in order)
            자기 자신의 노드 방문을 중간에
                왼쪽 자식 -> 노드 방문 -> 오른쪽 자식
                    먼저 왼쪽자식(끝까지)에 방문
        3. 후위 순회
            자기 자신의 노드 방문을 뒷쪽에
                왼쪽 자식 -> 오른쪽 자식 -> 노드 방문
                    왼쪽과 오른쪽의 노드를 방문한 후 자기 자신 노드를 프린트


    이진(검색)트리 (Binary Search Tree)
        이진 트리중 다음 조건을 만족하는 트리
            1. 어떤 노드 N을 기준으로 왼쪽 서브 트리 노드의 모든 값은 노드 N의 값보다 작아야 한다.
            2. 오른쪽 서브 트리 노드의 값은 노드 N의 값보다 커야한다.
            3. 같은 값의 노드는 존재하지 않는다.



노트

트리
    자료들 간의 계층을 표현하기 위해

이진탐색트리
        이진 트리이면서 왼쪽 노드들은 본인보다 작은 값을 
        오른쪽 노드들은 본인보다 높은 값을
        중복된 값은 저장이 된지 않는 트리

탐색방법
        너비우선탐색 (BFS)
                레벨단위로 왼쪽부터 오른쪽으로 탐색하는 방법
        깊이우선탐색 (DFS)
                리프까지 내려가며 탐색하는 방식
                전위순회
                중위순회
                후위순회




질문
    왜 init함수 사용을 안하는가?