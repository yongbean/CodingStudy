클래스 : 객체의 속성(구조체, 필드, 변수)과 행동(함수)을 정의 함


객체1 + 객체2 + 객체3 ......... ==> 클래스
    유일한 특성과 상태 그리고 행동을 가지고 있다.


        Circle
        반지름 : 속성
        면적 : 행동, 함수


        Circle 
        radius ;
        area();
        


    Circle1          Circle2          Circle3
    radius : 1.0     radius : 2.0     radius : 10
    area()           area()           area()


Circle의 복사도 ==> Circle1, Circle2, Circle3,... 

객체는 클래스의 instance(복사본).

class는 비어있는 template이다. (class == 설계도)
    -> 객체를 체워준다

class ==> (결국) 객체이다.

UML 표기법

(Class)

-----------------------
Circle
-----------------------
+radius: double         ---------------- 멤버 변수(필드)
-----------------------
+area() : double        ---------------- 멤버 함수
+Circle()
+Circle(radius : double)
-----------------------


-------------------
|+ ==> Public     |
|+(X) ==> private |
-------------------

(Object/객체/instance)

-----------------
Circle1 : Circle
-----------------
radius = 52.5
-----------------


public: ==> 필요한 함수나 변수에 계속 붙여줘야 한다



생성자 --> return 값 없음
--> 함수랑 같은 의미
--> 객체 생성
--> 멤버 필드를 초기화 한다

생성자는 변수와 함수 사이에 생긴다


즉,
Circle()



객체    한개당 1개의 클라스만 사용 가능

동적 객체 
--> new keyword 사용
----> 생성시 pointer 사용
--> class와 객체는 1:1만 가능 했다

--> new를 사용해서 만든 뒤 delete keyword사용해 동적 객체를 삭제한다


c++은 소멸자가 있다
    ~ 를 사용한다


//get/set 함수 : private로 선언된 멤버 필드에 접근하여 데이터를 수정할 수 있다.
//              멤버 변수를 사용하지 않고 멤버 함수를 통해서 접근하기 때문에
//              간접 접근이라고 할 수 있다.

정보의 은닉화 --> 숨기는 기능

Module

추상화
상속
다형성